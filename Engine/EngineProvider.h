#ifndef _EngineProvider_h_
#define _EngineProvider_h_

#include "EngineConfig.h"
#include "Win32/WindowFactory.h"
#include "Render/RenderFactory.h"
#include "Umg/UIFactory.h"
#include "Timer/TimerFactory.h"
#include "Render/Sprite/Animation.h"

// 引擎管理类
class EngineProvider {
private:
	// 构造
	EngineProvider();

	// 析构
	~EngineProvider();

	// 静态值
	static int buildEngine_state;
	static EngineProvider* g_eng;

	// 属性
	HINSTANCE engine_hInstance;			// 进程句柄
	std::shared_ptr<Window> mainWindow;	// 主窗口
	std::thread* update_Thread;			// 更新用线程
	std::thread* render_Thread;			// 渲染用线程
	int updateState;					// 更新 - 状态
	int renderState;					// 渲染 - 状态
	std::mutex lock_update;				// 锁 - 更新
	std::mutex lock_render;				// 锁 - 渲染
	std::condition_variable cv_update;	// 条件 - 更新
	std::condition_variable cv_render;	// 条件 - 渲染


public:
	// 获取引擎
	static EngineProvider* GetInstance();

	// 初始化引擎
	static void InitEngine();

	// 初始化引擎
	static void InitEngine(HINSTANCE _hinst);

	// 运行引擎
	static void RunEngine();

private:
	// 构建引擎
	void BuildEngineStruct();

	// 主线程运行
	void MainRunLoop();

	// 更新用线程
	void ThreadLoop_RunUpdate();

	// 渲染用线程
	void ThreadLoop_RunRender();

	// 等待线程结束
	void WaittingThreadProcess();

};

#endif // !_EngineProvider_h_
